---
---
<div class="chat-layout">
    <div class="online-users" style="border: 1px solid var(--border-color);">
        <h3>Usuários Online</h3>
        <div id="users-list"></div>
    </div>
    <div class="chat-main">
        <div class="user-info" style="border: 1px solid var(--border-color);">
            <span class="user-label">Seu nickname:</span>
            <div class="nickname-display">
                <span id="nickname"></span>
            </div>
            <div class="user-actions">
                <button id="edit-nickname" class="icon-button">
                    <span class="material-icons-round">edit</span>
                </button>
            </div>
        </div>
        
        <div class="chat-container" style="border: 1px solid var(--border-color);">
            <div id="messages" class="messages"></div>
            <div class="input-area">
                <input type="text" id="messageInput" placeholder="Digite sua mensagem..." />
                <button onclick="sendMessage()" class="send-button">
                    <span class="material-icons-round">send</span>
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    let currentNickname = generateNickname();
    const nicknameSpan = document.getElementById('nickname');
    const editButton = document.getElementById('edit-nickname');
    const ws = new WebSocket('ws://localhost/ws');
    const messages = document.getElementById('messages');
    const input = document.getElementById('messageInput');
    const usersList = document.getElementById('users-list');
    function generateNickname() {
        const adjetivos = ['Feliz', 'Veloz', 'Esperto', 'Criativo', 'Brilhante', 'Ágil', 'Forte'];
        const substantivos = ['Gato', 'Leão', 'Águia', 'Lobo', 'Tigre', 'Panda', 'Falcão'];
        const numero = Math.floor(Math.random() * 1000);
      
        const adjetivo = adjetivos[Math.floor(Math.random() * adjetivos.length)];
        const substantivo = substantivos[Math.floor(Math.random() * substantivos.length)];
      
        return `${adjetivo}_${substantivo}_${numero}`;
    }

    function updateNicknameDisplay() {
        nicknameSpan.textContent = currentNickname;
    }

    function updateNicknameInMessages(oldNick, newNick) {
        const messageElements = messages.querySelectorAll('.message strong');
        messageElements.forEach(element => {
            if (element.textContent === `${oldNick}:`) {
                element.textContent = `${newNick}:`;
            }
        });
    }

    function createNicknameEditor() {
        const container = document.createElement('div');
        container.className = 'nickname-editor';
      
        const input = document.createElement('input');
        input.type = 'text';
        input.value = currentNickname;
      
        const buttonsContainer = document.createElement('div');
        buttonsContainer.className = 'editor-buttons';
      
        const confirmBtn = document.createElement('button');
        confirmBtn.className = 'icon-button';
        confirmBtn.innerHTML = '<span class="material-icons-round">check</span>';
      
        const cancelBtn = document.createElement('button');
        cancelBtn.className = 'icon-button';
        cancelBtn.innerHTML = '<span class="material-icons-round">close</span>';
      
        buttonsContainer.appendChild(confirmBtn);
        buttonsContainer.appendChild(cancelBtn);
      
        container.appendChild(input);
        container.appendChild(buttonsContainer);
      
        confirmBtn.addEventListener('click', () => {
            const newNick = input.value.trim();
            if (newNick && newNick !== currentNickname) {
                ws.send(JSON.stringify({
                    type: 'check_nickname',
                    oldNickname: currentNickname,
                    newNickname: newNick
                }));
            }
        });
      
        cancelBtn.addEventListener('click', () => {
            container.remove();
            editButton.style.display = 'inline-flex';
            nicknameSpan.style.display = 'inline';
            updateNicknameDisplay();
        });
      
        return container;
    }

    editButton.addEventListener('click', () => {
        editButton.style.display = 'none';
        nicknameSpan.style.display = 'none';
        const editor = createNicknameEditor();
        nicknameSpan.parentNode.insertBefore(editor, nicknameSpan.nextSibling);
    });

    ws.onopen = () => {
        ws.send(JSON.stringify({
            type: 'join',
            nickname: currentNickname
        }));
    };
      ws.onmessage = (event) => {
          const data = JSON.parse(event.data);
      
          if (data.type === 'nickname_response') {
              if (data.success) {
                  const oldNickname = currentNickname;
                  currentNickname = data.newNickname;
                  nicknameSpan.style.display = 'inline';
                  editButton.style.display = 'inline-flex';
                  document.querySelector('.nickname-editor')?.remove();
                  updateNicknameDisplay();
                  updateNicknameInMessages(oldNickname, currentNickname);
              } else {
                  alert('Este nickname já está em uso. Por favor, escolha outro.');
              }
          } else if (data.type === 'nickname_changed') {
              updateNicknameInMessages(data.oldNickname, data.newNickname);
          } else if (data.type === 'online_users') {
              updateOnlineUsers(data.users);
          } else if (data.type === 'message') {
              addMessage(data);
          }
      };
    function updateOnlineUsers(users) {
        usersList.innerHTML = users
            .map(user => `<div class="user-item">${user}</div>`)
            .join('');
    }

    function addMessage(data) {
        const messageDiv = document.createElement('div');
        messageDiv.className = 'message';
        messageDiv.innerHTML = `<strong>${data.nickname}:</strong> ${data.message}`;
        messages.appendChild(messageDiv);
        messages.scrollTop = messages.scrollHeight;
    }

    window.sendMessage = () => {
        if (input.value) {
            ws.send(JSON.stringify({
                type: 'message',
                nickname: currentNickname,
                message: input.value
            }));
            input.value = '';
        }
    };

    input.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });

    updateNicknameDisplay();
</script>

<style is:global>
    .chat-layout {
        display: grid;
        grid-template-columns: 250px 1fr;
        gap: 1rem;
        height: calc(100vh - 120px);
    }

    .chat-main {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .user-info {
        display: grid;
        grid-template-columns: 3fr 6fr 3fr;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        background-color: var(--bg-secondary);
        border-radius: 8px;
    }

    .user-label {
        color: var(--text-secondary);
        white-space: nowrap;
    }

    .nickname-display {
        text-align: left;
        padding: 0 0.5rem;
        overflow: hidden;
        text-overflow: ellipsis;
    }
      .user-actions {
          display: flex;
          gap: 0.5rem;
          justify-content: flex-end;
      }

      .chat-container {
          display: flex;
          flex-direction: column;

      @media (max-width: 768px) {
          .online-users {
              order: -1;
              height: 120px;
              display: flex;
              flex-direction: column;
          }
      }
        flex: 1;
        background-color: var(--bg-secondary);
        border-radius: 8px;
        overflow: hidden;
    }

    .messages {
        flex: 1;
        overflow-y: auto;
        padding: 1rem;
    }

    .message {
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        border-radius: 4px;
    }

    .message:nth-child(odd) {
        background-color: var(--bg-tertiary);
    }

    .input-area {
        display: flex;
        gap: 0.5rem;

    .online-users {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        padding: 1rem;
        max-width: 250px;
        width: 100%;
    }

    #users-list {
        max-width: 230px;
        overflow-x: auto;
        display: flex;
        flex-wrap: nowrap;
        gap: 0.5rem;
        padding-bottom: 0.5rem;
        scrollbar-width: thin;
        -webkit-overflow-scrolling: touch;
    }

    .user-item {
        flex: 0 0 auto;
        white-space: nowrap;
        margin-right: 0.5rem;
    }        padding: 1rem;
        background-color: var(--bg-tertiary);
    }

    .input-area input {
        flex: 1;
        padding: 0.5rem;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background-color: var(--bg-primary);
        color: var(--text-primary);
    }

    .send-button {
        background-color: var(--success-color);
        color: white;
        border: none;
        border-radius: 4px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .send-button:hover {
        opacity: 0.9;
    }

    .online-users {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        padding: 1rem;
    }

    .online-users h3 {
        color: var(--text-secondary);
        margin-bottom: 1rem;
        font-size: 1rem;
    }

    .user-item {
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        background-color: var(--bg-tertiary);
        border-radius: 4px;
    }

    .icon-button {
        background: none;
        border: none;
        color: var(--text-secondary);
        cursor: pointer;
        padding: 0.25rem;
        border-radius: 4px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .icon-button:hover {
        background-color: var(--bg-tertiary);
    }

    .nickname-editor {
        display: grid;
        grid-template-columns: 1fr auto;
        gap: 0.5rem;
        align-items: center;
    }

    .editor-buttons {
        display: flex;
        gap: 0.25rem;
    }

    @media (max-width: 768px) {
        .chat-layout {
            grid-template-columns: 1fr;
            gap: 0.5rem;  /* Reduzido de 1rem para 0.5rem */
            height: calc(100vh - 100px); /* Ajustado para melhor aproveitamento vertical */
        }

        .online-users {
            order: -1;
            height: 120px; /* Altura fixa para o container */
            display: flex;
            flex-direction: column;            
            max-width: 92vw;
        }
          #users-list {
              max-width: 100%;
              overflow-x: auto;
              display: flex;
              flex-wrap: nowrap;
              gap: 0.5rem;
              padding-bottom: 0.5rem;
              /* Adiciona uma barra de rolagem suave */
              scrollbar-width: thin;
              -webkit-overflow-scrolling: touch;
          }

          .user-item {
              flex: 0 0 auto;
              white-space: nowrap;
              margin-right: 0.5rem;
          }
        .chat-main {
            gap: 0.5rem; /* Reduzido de 1rem para 0.5rem */
            flex: 1;
        }
    }
</style>
